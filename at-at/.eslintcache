[{"/app/src/index.js":"1","/app/src/App.js":"2","/app/src/reportWebVitals.js":"3","/app/src/navbar/Navbar.jsx":"4","/app/src/login/LoginMain.jsx":"5","/app/src/notifications/NotificationsMain.jsx":"6","/app/src/tasker_out/TaskerOutboxMain.jsx":"7","/app/src/home/HomeMain.jsx":"8","/app/src/tasker_creation/TaskerCreationMain.jsx":"9","/app/src/tasker_in/TaskerInboxMain.jsx":"10","/app/src/notifications/NotificationViewer.jsx":"11","/app/src/tasker_creation/FormExample.jsx":"12","/app/src/tasker_creation/TaskerForm.jsx":"13"},{"size":500,"mtime":1609788775370,"results":"14","hashOfConfig":"15"},{"size":1209,"mtime":1609946160655,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1609788775370,"results":"17","hashOfConfig":"15"},{"size":2272,"mtime":1609946160657,"results":"18","hashOfConfig":"15"},{"size":1680,"mtime":1609946160657,"results":"19","hashOfConfig":"15"},{"size":598,"mtime":1609946160658,"results":"20","hashOfConfig":"15"},{"size":282,"mtime":1609790647959,"results":"21","hashOfConfig":"15"},{"size":257,"mtime":1609946160656,"results":"22","hashOfConfig":"15"},{"size":5225,"mtime":1609963905342,"results":"23","hashOfConfig":"15"},{"size":279,"mtime":1609790646728,"results":"24","hashOfConfig":"15"},{"size":344,"mtime":1609946160658,"results":"25","hashOfConfig":"15"},{"size":3094,"mtime":1609879109707,"results":"26","hashOfConfig":"15"},{"size":5195,"mtime":1609961670604,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1gbxmd7",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},"/app/src/index.js",[],["61","62"],"/app/src/App.js",[],"/app/src/reportWebVitals.js",[],"/app/src/navbar/Navbar.jsx",[],"/app/src/login/LoginMain.jsx",["63","64"],"import React from \"react\"\n\n\nclass LoginMain extends React.Component {\n    constructor(props) {\n        super(props) \n        this.state = {\n            username: '',\n            passphrase: '',\n        }\n    }\n\n    handleInput = (event) => {\n        this.setState({[event.target.name]: event.target.value})\n    }    \n\n    handleLogin = async () => {\n        const response = await fetch(`http://localhost:3001/authenticate`, {\n            method: 'POST',\n            headers: { 'Content-Type':  'application/json' },\n            body: JSON.stringify({\n                username: this.state.username,\n                passphrase: this.state.passphrase,\n              })\n           });\n        if(response.status == 401){\n            alert(\"Incorrect password or username.\")\n        } else if(response.status == 404){\n            alert(\"Username not found. Please register first.\")\n        } else {\n            const resDetails = await response.json();\n            alert(`Welcome ${resDetails[0].first_name} ${resDetails[0].last_name}!`)\n            this.props.history.push('/create_tasker')\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <h1>Login</h1>\n                <label>Username: </label>\n                <input type='text' name='username' value={this.state.username} onChange={this.handleInput}></input>\n                <br/>\n                <label>Password: </label>\n                <input type='text' name='passphrase' value={this.state.passphrase} onChange={this.handleInput}></input>\n                <br/>\n                <button onClick={this.handleLogin}>Login</button>\n            </div>\n        )\n    }\n\n}\n\n\nexport default LoginMain;","/app/src/notifications/NotificationsMain.jsx",[],"/app/src/tasker_out/TaskerOutboxMain.jsx",["65"],"import React from \"react\"\n\n\nclass TaskerOutboxMain extends React.Component {\n    constructor(props) {\n        super(props) \n    }\n\n    render() {\n        return(\n            <div> I am inside of the Tasker Outbox Main page</div>\n        )\n    }\n\n}\n\n\nexport default TaskerOutboxMain;","/app/src/home/HomeMain.jsx",["66"],"import React from \"react\"\n\n\nclass HomeMain extends React.Component {\n    constructor(props) {\n        super(props) \n    }\n\n    render() {\n        return(\n            <div> I am inside of the Home Main page</div>\n        )\n    }\n\n}\n\n\nexport default HomeMain;","/app/src/tasker_creation/TaskerCreationMain.jsx",[],"/app/src/tasker_in/TaskerInboxMain.jsx",["67"],"import React from \"react\"\n\n\nclass TaskerInboxMain extends React.Component {\n    constructor(props) {\n        super(props) \n    }\n\n    render() {\n        return(\n            <div> I am inside of the Tasker Inbox Main page</div>\n        )\n    }\n\n}\n\n\nexport default TaskerInboxMain;","/app/src/notifications/NotificationViewer.jsx",[],"/app/src/tasker_creation/FormExample.jsx",[],["68","69"],"/app/src/tasker_creation/TaskerForm.jsx",["70"],"import React, { useState, Fragment } from \"react\";\n\n// create a variable that holds the whole form\n// buttons will update that variable\n// return is that\n\n\nconst TaskerForm = (props) => {\n    let i = 0;\n    let unitNames = props.units.map((unit) => {\n        i += 1;\n        return(\n            <option\n                value={unit}\n                key={props.units.indexOf(unit)}\n            >\n                {unit}\n            </option>\n        )\n    })\n\n    const [inputFields, setInputFields] = useState([\n        { unit : '' , unit_id : ''}\n    ]);\n\n    const handleAddFields = () => {\n        const values = [...inputFields];\n        values.push({ unit: '' });\n        setInputFields(values);\n    };\n\n    const handleRemoveFields = index => {\n        const values = [...inputFields];\n        values.splice(index, 1);\n        setInputFields(values);\n    };\n\n    const handleInputChange = (index, event) => {\n        const values = [...inputFields];\n            values[index].unit = event.target.value;\n            //create a handler for this that sets the values when called from in here\n        setInputFields(values);\n        props.onUnitChange(values);\n    };\n\n    const buttonHandler = (index) => {\n        if(inputFields.length<2) {\n            return(\n                <button\n                className=\"btn btn-link\"\n                type=\"button\"\n                onClick={() => handleAddFields()}\n                >\n                +\n                </button>\n            )\n        } else return(\n            <div>\n                <button\n                className=\"btn btn-link\"\n                type=\"button\"\n                onClick={() => handleRemoveFields(index)}   //will need to update the list of units when one is removed!!!!\n                >\n                -\n                </button>\n\n                <button\n                className=\"btn btn-link\"\n                type=\"button\"\n                onClick={() => handleAddFields()}\n                >\n                +\n                </button>\n            </div>\n        )\n    }\n\n    return(\n        <>\n            <div>Select Units to send this Tasker to</div>\n            <form onSubmit={props.onSubmitTasker}>\n                <div className=\"form-row\">\n                    {inputFields.map((inputField, index) => (\n                        <Fragment key={`${inputField}~${index}`}>\n                        <div className=\"form-group col-sm-6\">\n                            <label htmlFor=\"unit\">Unit: </label>\n                            <select\n                                className=\"form-control\"\n                                id=\"unit\"\n                                name=\"unit\"\n                                value={inputField.unit}\n                                onChange={event => { handleInputChange(index, event)}}\n                                ><option key=\"empty\" value=\"\"></option>\n                                {unitNames}\n                            </select>\n                        </div>\n\n                        <div className=\"form-group col-sm-2\">\n                            {buttonHandler(index)}\n                        </div>\n\n                        </Fragment>\n                    ))}\n                </div>\n\n                <div>\n                    <span>Tasker Name:</span>\n                    <input \n                        id=\"tasker_name\"\n                        name=\"Tasker Name\"\n                        placeholder=\"Tasker Name\"\n                        onChange={props.onInputChange} \n                    ></input>\n                </div>\n\n                <div>\n                    <span>Suspense Date</span>\n                    <input\n                        id=\"suspense_date\"\n                        type=\"date\"\n                        onChange={props.onInputChange}\n                    ></input>\n                </div>\n\n                <div>\n                    <span>Priority</span>\n                    <select id=\"priority_lvl\" defaultValue = \"Low\" onChange={props.onInputChange}>\n                        <option key=\"Low\" value=\"Low\">Low</option>\n                        <option key=\"Medium\" value=\"Medium\">Medium</option>\n                        <option key=\"High\" value=\"High\">High</option>\n                    </select>\n                </div>\n\n                <div>\n                    <span>Predicted Workload (hours)</span>\n                    <input\n                        id=\"predicted_workload\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"24\"\n                        placeholder=\"hrs\"\n                        onChange={props.onInputChange} \n                    ></input>\n                </div>\n\n                <div>\n                    <textarea \n                        id=\"desc_text\"\n                        placeholder=\"Tasker Description\"\n                        onChange={props.onInputChange} \n                    ></textarea>\n                </div>\n\n                <input type=\"submit\" value=\"Send Tasker with Extreme Prejudice\"/>\n            </form>\n            <span> ------------------------------------------------------------------------ </span>\n        </>\n    )\n}\n\nexport default TaskerForm;",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":26,"column":28,"nodeType":"77","messageId":"78","endLine":26,"endColumn":30},{"ruleId":"75","severity":1,"message":"76","line":28,"column":35,"nodeType":"77","messageId":"78","endLine":28,"endColumn":37},{"ruleId":"79","severity":1,"message":"80","line":5,"column":5,"nodeType":"81","messageId":"82","endLine":7,"endColumn":6},{"ruleId":"79","severity":1,"message":"80","line":5,"column":5,"nodeType":"81","messageId":"82","endLine":7,"endColumn":6},{"ruleId":"79","severity":1,"message":"80","line":5,"column":5,"nodeType":"81","messageId":"82","endLine":7,"endColumn":6},{"ruleId":"71","replacedBy":"83"},{"ruleId":"73","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":11,"column":9,"nodeType":"87","messageId":"88","endLine":11,"endColumn":10},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["89"],["90"],"no-unused-vars","'i' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]